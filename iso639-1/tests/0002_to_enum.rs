extern crate iso639_1;
use std::convert::TryFrom;

use iso639_1::{Iso639_1, Iso639v1ErrorKind};

#[test]
fn to_enum_0001_notexist() {
    let result = Iso639_1::try_from("XXXX");
    assert!(result.is_err() == true);
    let error = result.err().unwrap();
    let message = error.inner.to_string();
    assert_eq!(message, "not found XXXX".to_string());
    let kind = error.kind();
    assert_eq!(kind, &Iso639v1ErrorKind::NotFoundFrom("XXXX".to_string()));
}

#[test]
fn to_enum_0002_2chars() {
    assert!(Iso639_1::try_from("aa").unwrap() == Iso639_1::Aa);
    assert!(Iso639_1::try_from("ab").unwrap() == Iso639_1::Ab);
    assert!(Iso639_1::try_from("ae").unwrap() == Iso639_1::Ae);
    assert!(Iso639_1::try_from("af").unwrap() == Iso639_1::Af);
    assert!(Iso639_1::try_from("ak").unwrap() == Iso639_1::Ak);
    assert!(Iso639_1::try_from("am").unwrap() == Iso639_1::Am);
    assert!(Iso639_1::try_from("an").unwrap() == Iso639_1::An);
    assert!(Iso639_1::try_from("ar").unwrap() == Iso639_1::Ar);
    assert!(Iso639_1::try_from("as").unwrap() == Iso639_1::As);
    assert!(Iso639_1::try_from("av").unwrap() == Iso639_1::Av);
    assert!(Iso639_1::try_from("ay").unwrap() == Iso639_1::Ay);
    assert!(Iso639_1::try_from("az").unwrap() == Iso639_1::Az);
    assert!(Iso639_1::try_from("ba").unwrap() == Iso639_1::Ba);
    assert!(Iso639_1::try_from("be").unwrap() == Iso639_1::Be);
    assert!(Iso639_1::try_from("bg").unwrap() == Iso639_1::Bg);
    assert!(Iso639_1::try_from("bh").unwrap() == Iso639_1::Bh);
    assert!(Iso639_1::try_from("bi").unwrap() == Iso639_1::Bi);
    assert!(Iso639_1::try_from("bm").unwrap() == Iso639_1::Bm);
    assert!(Iso639_1::try_from("bn").unwrap() == Iso639_1::Bn);
    assert!(Iso639_1::try_from("bo").unwrap() == Iso639_1::Bo);
    assert!(Iso639_1::try_from("br").unwrap() == Iso639_1::Br);
    assert!(Iso639_1::try_from("bs").unwrap() == Iso639_1::Bs);
    assert!(Iso639_1::try_from("ca").unwrap() == Iso639_1::Ca);
    assert!(Iso639_1::try_from("ce").unwrap() == Iso639_1::Ce);
    assert!(Iso639_1::try_from("ch").unwrap() == Iso639_1::Ch);
    assert!(Iso639_1::try_from("co").unwrap() == Iso639_1::Co);
    assert!(Iso639_1::try_from("cr").unwrap() == Iso639_1::Cr);
    assert!(Iso639_1::try_from("cs").unwrap() == Iso639_1::Cs);
    assert!(Iso639_1::try_from("cu").unwrap() == Iso639_1::Cu);
    assert!(Iso639_1::try_from("cv").unwrap() == Iso639_1::Cv);
    assert!(Iso639_1::try_from("cy").unwrap() == Iso639_1::Cy);
    assert!(Iso639_1::try_from("da").unwrap() == Iso639_1::Da);
    assert!(Iso639_1::try_from("de").unwrap() == Iso639_1::De);
    assert!(Iso639_1::try_from("dv").unwrap() == Iso639_1::Dv);
    assert!(Iso639_1::try_from("dz").unwrap() == Iso639_1::Dz);
    assert!(Iso639_1::try_from("ee").unwrap() == Iso639_1::Ee);
    assert!(Iso639_1::try_from("el").unwrap() == Iso639_1::El);
    assert!(Iso639_1::try_from("en").unwrap() == Iso639_1::En);
    assert!(Iso639_1::try_from("eo").unwrap() == Iso639_1::Eo);
    assert!(Iso639_1::try_from("es").unwrap() == Iso639_1::Es);
    assert!(Iso639_1::try_from("et").unwrap() == Iso639_1::Et);
    assert!(Iso639_1::try_from("eu").unwrap() == Iso639_1::Eu);
    assert!(Iso639_1::try_from("fa").unwrap() == Iso639_1::Fa);
    assert!(Iso639_1::try_from("ff").unwrap() == Iso639_1::Ff);
    assert!(Iso639_1::try_from("fi").unwrap() == Iso639_1::Fi);
    assert!(Iso639_1::try_from("fj").unwrap() == Iso639_1::Fj);
    assert!(Iso639_1::try_from("fo").unwrap() == Iso639_1::Fo);
    assert!(Iso639_1::try_from("fr").unwrap() == Iso639_1::Fr);
    assert!(Iso639_1::try_from("fy").unwrap() == Iso639_1::Fy);
    assert!(Iso639_1::try_from("ga").unwrap() == Iso639_1::Ga);
    assert!(Iso639_1::try_from("gd").unwrap() == Iso639_1::Gd);
    assert!(Iso639_1::try_from("gl").unwrap() == Iso639_1::Gl);
    assert!(Iso639_1::try_from("gn").unwrap() == Iso639_1::Gn);
    assert!(Iso639_1::try_from("gu").unwrap() == Iso639_1::Gu);
    assert!(Iso639_1::try_from("gv").unwrap() == Iso639_1::Gv);
    assert!(Iso639_1::try_from("ha").unwrap() == Iso639_1::Ha);
    assert!(Iso639_1::try_from("he").unwrap() == Iso639_1::He);
    assert!(Iso639_1::try_from("hi").unwrap() == Iso639_1::Hi);
    assert!(Iso639_1::try_from("ho").unwrap() == Iso639_1::Ho);
    assert!(Iso639_1::try_from("hr").unwrap() == Iso639_1::Hr);
    assert!(Iso639_1::try_from("ht").unwrap() == Iso639_1::Ht);
    assert!(Iso639_1::try_from("hu").unwrap() == Iso639_1::Hu);
    assert!(Iso639_1::try_from("hy").unwrap() == Iso639_1::Hy);
    assert!(Iso639_1::try_from("hz").unwrap() == Iso639_1::Hz);
    assert!(Iso639_1::try_from("ia").unwrap() == Iso639_1::Ia);
    assert!(Iso639_1::try_from("id").unwrap() == Iso639_1::Id);
    assert!(Iso639_1::try_from("ie").unwrap() == Iso639_1::Ie);
    assert!(Iso639_1::try_from("ig").unwrap() == Iso639_1::Ig);
    assert!(Iso639_1::try_from("ii").unwrap() == Iso639_1::Ii);
    assert!(Iso639_1::try_from("ik").unwrap() == Iso639_1::Ik);
    assert!(Iso639_1::try_from("io").unwrap() == Iso639_1::Io);
    assert!(Iso639_1::try_from("is").unwrap() == Iso639_1::Is);
    assert!(Iso639_1::try_from("it").unwrap() == Iso639_1::It);
    assert!(Iso639_1::try_from("iu").unwrap() == Iso639_1::Iu);
    assert!(Iso639_1::try_from("ja").unwrap() == Iso639_1::Ja);
    assert!(Iso639_1::try_from("jv").unwrap() == Iso639_1::Jv);
    assert!(Iso639_1::try_from("ka").unwrap() == Iso639_1::Ka);
    assert!(Iso639_1::try_from("kg").unwrap() == Iso639_1::Kg);
    assert!(Iso639_1::try_from("ki").unwrap() == Iso639_1::Ki);
    assert!(Iso639_1::try_from("kj").unwrap() == Iso639_1::Kj);
    assert!(Iso639_1::try_from("kk").unwrap() == Iso639_1::Kk);
    assert!(Iso639_1::try_from("kl").unwrap() == Iso639_1::Kl);
    assert!(Iso639_1::try_from("km").unwrap() == Iso639_1::Km);
    assert!(Iso639_1::try_from("kn").unwrap() == Iso639_1::Kn);
    assert!(Iso639_1::try_from("ko").unwrap() == Iso639_1::Ko);
    assert!(Iso639_1::try_from("kr").unwrap() == Iso639_1::Kr);
    assert!(Iso639_1::try_from("ks").unwrap() == Iso639_1::Ks);
    assert!(Iso639_1::try_from("ku").unwrap() == Iso639_1::Ku);
    assert!(Iso639_1::try_from("kv").unwrap() == Iso639_1::Kv);
    assert!(Iso639_1::try_from("kw").unwrap() == Iso639_1::Kw);
    assert!(Iso639_1::try_from("ky").unwrap() == Iso639_1::Ky);
    assert!(Iso639_1::try_from("la").unwrap() == Iso639_1::La);
    assert!(Iso639_1::try_from("lb").unwrap() == Iso639_1::Lb);
    assert!(Iso639_1::try_from("lg").unwrap() == Iso639_1::Lg);
    assert!(Iso639_1::try_from("li").unwrap() == Iso639_1::Li);
    assert!(Iso639_1::try_from("ln").unwrap() == Iso639_1::Ln);
    assert!(Iso639_1::try_from("lo").unwrap() == Iso639_1::Lo);
    assert!(Iso639_1::try_from("lt").unwrap() == Iso639_1::Lt);
    assert!(Iso639_1::try_from("lu").unwrap() == Iso639_1::Lu);
    assert!(Iso639_1::try_from("lv").unwrap() == Iso639_1::Lv);
    assert!(Iso639_1::try_from("mg").unwrap() == Iso639_1::Mg);
    assert!(Iso639_1::try_from("mh").unwrap() == Iso639_1::Mh);
    assert!(Iso639_1::try_from("mi").unwrap() == Iso639_1::Mi);
    assert!(Iso639_1::try_from("mk").unwrap() == Iso639_1::Mk);
    assert!(Iso639_1::try_from("ml").unwrap() == Iso639_1::Ml);
    assert!(Iso639_1::try_from("mn").unwrap() == Iso639_1::Mn);
    assert!(Iso639_1::try_from("mr").unwrap() == Iso639_1::Mr);
    assert!(Iso639_1::try_from("ms").unwrap() == Iso639_1::Ms);
    assert!(Iso639_1::try_from("mt").unwrap() == Iso639_1::Mt);
    assert!(Iso639_1::try_from("my").unwrap() == Iso639_1::My);
    assert!(Iso639_1::try_from("na").unwrap() == Iso639_1::Na);
    assert!(Iso639_1::try_from("nb").unwrap() == Iso639_1::Nb);
    assert!(Iso639_1::try_from("nd").unwrap() == Iso639_1::Nd);
    assert!(Iso639_1::try_from("ne").unwrap() == Iso639_1::Ne);
    assert!(Iso639_1::try_from("ng").unwrap() == Iso639_1::Ng);
    assert!(Iso639_1::try_from("nl").unwrap() == Iso639_1::Nl);
    assert!(Iso639_1::try_from("nn").unwrap() == Iso639_1::Nn);
    assert!(Iso639_1::try_from("no").unwrap() == Iso639_1::No);
    assert!(Iso639_1::try_from("nr").unwrap() == Iso639_1::Nr);
    assert!(Iso639_1::try_from("nv").unwrap() == Iso639_1::Nv);
    assert!(Iso639_1::try_from("ny").unwrap() == Iso639_1::Ny);
    assert!(Iso639_1::try_from("oc").unwrap() == Iso639_1::Oc);
    assert!(Iso639_1::try_from("oj").unwrap() == Iso639_1::Oj);
    assert!(Iso639_1::try_from("om").unwrap() == Iso639_1::Om);
    assert!(Iso639_1::try_from("or").unwrap() == Iso639_1::Or);
    assert!(Iso639_1::try_from("os").unwrap() == Iso639_1::Os);
    assert!(Iso639_1::try_from("pa").unwrap() == Iso639_1::Pa);
    assert!(Iso639_1::try_from("pi").unwrap() == Iso639_1::Pi);
    assert!(Iso639_1::try_from("pl").unwrap() == Iso639_1::Pl);
    assert!(Iso639_1::try_from("ps").unwrap() == Iso639_1::Ps);
    assert!(Iso639_1::try_from("pt").unwrap() == Iso639_1::Pt);
    assert!(Iso639_1::try_from("qu").unwrap() == Iso639_1::Qu);
    assert!(Iso639_1::try_from("rm").unwrap() == Iso639_1::Rm);
    assert!(Iso639_1::try_from("rn").unwrap() == Iso639_1::Rn);
    assert!(Iso639_1::try_from("ro").unwrap() == Iso639_1::Ro);
    assert!(Iso639_1::try_from("ru").unwrap() == Iso639_1::Ru);
    assert!(Iso639_1::try_from("rw").unwrap() == Iso639_1::Rw);
    assert!(Iso639_1::try_from("sa").unwrap() == Iso639_1::Sa);
    assert!(Iso639_1::try_from("sc").unwrap() == Iso639_1::Sc);
    assert!(Iso639_1::try_from("sd").unwrap() == Iso639_1::Sd);
    assert!(Iso639_1::try_from("se").unwrap() == Iso639_1::Se);
    assert!(Iso639_1::try_from("sg").unwrap() == Iso639_1::Sg);
    assert!(Iso639_1::try_from("si").unwrap() == Iso639_1::Si);
    assert!(Iso639_1::try_from("sk").unwrap() == Iso639_1::Sk);
    assert!(Iso639_1::try_from("sl").unwrap() == Iso639_1::Sl);
    assert!(Iso639_1::try_from("sm").unwrap() == Iso639_1::Sm);
    assert!(Iso639_1::try_from("sn").unwrap() == Iso639_1::Sn);
    assert!(Iso639_1::try_from("so").unwrap() == Iso639_1::So);
    assert!(Iso639_1::try_from("sq").unwrap() == Iso639_1::Sq);
    assert!(Iso639_1::try_from("sr").unwrap() == Iso639_1::Sr);
    assert!(Iso639_1::try_from("ss").unwrap() == Iso639_1::Ss);
    assert!(Iso639_1::try_from("st").unwrap() == Iso639_1::St);
    assert!(Iso639_1::try_from("su").unwrap() == Iso639_1::Su);
    assert!(Iso639_1::try_from("sv").unwrap() == Iso639_1::Sv);
    assert!(Iso639_1::try_from("sw").unwrap() == Iso639_1::Sw);
    assert!(Iso639_1::try_from("ta").unwrap() == Iso639_1::Ta);
    assert!(Iso639_1::try_from("te").unwrap() == Iso639_1::Te);
    assert!(Iso639_1::try_from("tg").unwrap() == Iso639_1::Tg);
    assert!(Iso639_1::try_from("th").unwrap() == Iso639_1::Th);
    assert!(Iso639_1::try_from("ti").unwrap() == Iso639_1::Ti);
    assert!(Iso639_1::try_from("tk").unwrap() == Iso639_1::Tk);
    assert!(Iso639_1::try_from("tl").unwrap() == Iso639_1::Tl);
    assert!(Iso639_1::try_from("tn").unwrap() == Iso639_1::Tn);
    assert!(Iso639_1::try_from("to").unwrap() == Iso639_1::To);
    assert!(Iso639_1::try_from("tr").unwrap() == Iso639_1::Tr);
    assert!(Iso639_1::try_from("ts").unwrap() == Iso639_1::Ts);
    assert!(Iso639_1::try_from("tt").unwrap() == Iso639_1::Tt);
    assert!(Iso639_1::try_from("tw").unwrap() == Iso639_1::Tw);
    assert!(Iso639_1::try_from("ty").unwrap() == Iso639_1::Ty);
    assert!(Iso639_1::try_from("ug").unwrap() == Iso639_1::Ug);
    assert!(Iso639_1::try_from("uk").unwrap() == Iso639_1::Uk);
    assert!(Iso639_1::try_from("ur").unwrap() == Iso639_1::Ur);
    assert!(Iso639_1::try_from("uz").unwrap() == Iso639_1::Uz);
    assert!(Iso639_1::try_from("ve").unwrap() == Iso639_1::Ve);
    assert!(Iso639_1::try_from("vi").unwrap() == Iso639_1::Vi);
    assert!(Iso639_1::try_from("vo").unwrap() == Iso639_1::Vo);
    assert!(Iso639_1::try_from("wa").unwrap() == Iso639_1::Wa);
    assert!(Iso639_1::try_from("wo").unwrap() == Iso639_1::Wo);
    assert!(Iso639_1::try_from("xh").unwrap() == Iso639_1::Xh);
    assert!(Iso639_1::try_from("yi").unwrap() == Iso639_1::Yi);
    assert!(Iso639_1::try_from("yo").unwrap() == Iso639_1::Yo);
    assert!(Iso639_1::try_from("za").unwrap() == Iso639_1::Za);
    assert!(Iso639_1::try_from("zh").unwrap() == Iso639_1::Zh);
    assert!(Iso639_1::try_from("zu").unwrap() == Iso639_1::Zu);
}
